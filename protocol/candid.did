

type VaultId = nat32;

type Vault = record {
  id: VaultId;
  collateral: Collateral;
  owner: principal;
  maintenance_ratio: nat64;
  debt: nat64;
  liquidation_price: nat64;
  state: VaultState;
};

type Collateral = variant {
  BTC;
  ICP;
};

type VaultState = variant {
  Redeemed;
  Liquidated;
  Open;
};

type VaultBTC = record {
  balance: nat64;
  public_address: text;
};

type CreateVaultInput = record {};

type VaultErr = variant {
  MissingPrivateKey;
  NotFound;
  Conflict;
  Bad: text;
  Unknown;
  InsufficientAmount;
  InvalidBalance;
};

type CreateVaultReceipt = variant {
  Err: VaultErr;
  Ok: Vault;
};

type ClaimVaultReceipt = variant {
  Err: VaultErr;
  Ok: nat64;
};

type GetVaultBTC = variant {
  Err: VaultErr;
  Ok: VaultBTC;
};

type InitPayload = record {
  bitcoin_canister_id : principal;
};

service: (InitPayload) -> {
  create_vault: (CreateVaultInput) -> (CreateVaultReceipt);
  get_vault: (VaultId) -> (opt Vault) query;
  get_vaults: () -> (vec Vault) query;
  claim_vault: (VaultId) -> (ClaimVaultReceipt);
  get_vault_btc: (VaultId) -> (GetVaultBTC);
  redeem_vault: (VaultId) -> (CreateVaultReceipt);
  liquidate_vault: (VaultId) -> (CreateVaultReceipt);
}
